from django.db import models
from django.contrib.auth.models import AbstractUser
from datetime import datetime



class CustomUser(AbstractUser):
    firstname = models.TextField(max_length=100, default="")
    lastname = models.TextField(max_length=100, default="")
    username = models.CharField(max_length=30, unique=True)
    email = models.EmailField(max_length=254, unique=True)
    role = models.CharField(max_length=100,default="")
    password = models.CharField(max_length=128, default="")
   
   

    def __str__(self):
        return self.password
    

class LoginDetail(models.Model):
    login_id = models.AutoField(primary_key=True)  # Autogenerated primary key
    username = models.ForeignKey(CustomUser, on_delete=models.CASCADE)  # Foreign key to the Customer model
    login_time = models.DateTimeField(auto_now_add=True)  # Time of login

    def __str__(self):
        return self.username.username 
    
    
class District(models.Model):
    # Primary key field with the format disXXX (e.g., dis001, dis002, etc.)
    district_id = models.AutoField(primary_key=True, editable=False)

    # District name field
    district_name = models.CharField(max_length=100)

    

    def __str__(self):
        return self.district_name
    
    
class WaterProduct(models.Model):
    product_id = models.AutoField(primary_key=True, editable=False)
    product_name = models.CharField(max_length=100)
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0.00) 
    

    def __str__(self):
        return self.product_name
    
class City(models.Model):
    City_ID = models.AutoField(primary_key=True)
    city_name = models.CharField(max_length=100)

    def __str__(self):
        return self.city_name
    

class Order(models.Model):
    order_id = models.AutoField(primary_key=True, editable=False)
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
    product = models.ForeignKey(WaterProduct, on_delete=models.CASCADE)
    quantity = models.IntegerField()
    delivery_date_time = models.DateTimeField(default=datetime.now)
    order_time = models.DateTimeField(auto_now_add=True)
     

    def __str__(self):
        return f"Order {self.order_id}"
    
class Address(models.Model):
    address_id = models.AutoField(primary_key=True, editable=False)
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
    mobile_number = models.CharField(max_length=15)
    pincode = models.CharField(max_length=10)
    City_ID = models.ForeignKey(City, on_delete=models.CASCADE, default=1)
    street = models.CharField(max_length=100)
    district = models.ForeignKey(District, on_delete=models.CASCADE)
   
    def __str__(self):
        return f"Address {self.address_id}"
    
class OrderAddress(models.Model):
    order = models.ForeignKey(Order, on_delete=models.CASCADE)
    address = models.ForeignKey(Address, on_delete=models.CASCADE)

    def __str__(self):
        return f"Order {self.order_id} - Address {self.address_id}"




class UserAddress(models.Model):
    address_id = models.AutoField(primary_key=True, editable=False)
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
    
    pincode = models.CharField(max_length=10)
    
    City_ID = models.ForeignKey(City, on_delete=models.CASCADE)
    district = models.ForeignKey(District, on_delete=models.CASCADE)
   
    def __str__(self):
        return f"Address {self.address_id}"
    
class UserOrder(models.Model):
    order_id = models.AutoField(primary_key=True)
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
    address = models.ForeignKey(UserAddress, on_delete=models.CASCADE)
    quantity = models.DecimalField(max_digits=10, decimal_places=2)  # Represented in gallons
    delivery_date_time = models.DateTimeField()
    payment_method = models.CharField(max_length=20)
    special_instructions = models.TextField(blank=True)  # Optional field for instructions

    def __str__(self):
        return f"Order ID: {self.order_id}, User: {self.address.user.username}"
    

class WorkerProfile(models.Model):
    worker_id = models.AutoField(primary_key=True)
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
    profile_picture = models.ImageField(upload_to='profile_pictures/', blank=True, null=True)
    gender = models.CharField(max_length=10, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')])
    mobile_number = models.CharField(max_length=15, blank=True, null=True)
    district = models.ForeignKey(District, on_delete=models.CASCADE, blank=True, null=True)
    bio = models.TextField(blank=True)
    services = models.CharField(max_length=255, blank=True)
    experience = models.CharField(max_length=100, blank=True)
    availability = models.CharField(max_length=100, blank=True)
    terms = models.BooleanField(default=False)

    def __str__(self):
        return str(self.worker_id)
    

class AddService(models.Model):
    service_id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=255)
    price = models.DecimalField(max_digits=10, decimal_places=2)

    def __str__(self):
        return self.name
    

class ServiceRequest(models.Model):
    Request_id = models.AutoField(primary_key=True)
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE)  # Use the User model as a foreign key
    service_name = models.ForeignKey(AddService, on_delete=models.CASCADE)
    length = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    width = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    water_level = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    street = models.CharField(max_length=255)
    city = models.ForeignKey(City, on_delete=models.CASCADE)  # Assuming you have a City model
    district = models.ForeignKey(District, on_delete=models.CASCADE)  # Assuming you have a District model
    zip_code = models.CharField(max_length=10)
    request_date_time = models.DateTimeField()
    

    def __str__(self):
        return str(self.Request_id)
    

class UploadedFile(models.Model):
    file_id = models.AutoField(primary_key=True)
    description = models.TextField()
    pdf_file = models.FileField(upload_to='uploads/pdf/')
    upload_date = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.description
    



class DrinkingWaterProduct(models.Model):
    product_id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=100)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    quantity = models.PositiveIntegerField()

    def __str__(self):
        return self.name

    def reduce_stock(self, quantity_to_reduce):
        if self.quantity >= quantity_to_reduce:
            self.quantity -= quantity_to_reduce
            return True
        return False
    
class WaterOrder(models.Model):
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
    product = models.ForeignKey(DrinkingWaterProduct, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField()
    delivery_date_time = models.DateTimeField()
    city = models.ForeignKey(City, on_delete=models.CASCADE)
    district = models.ForeignKey(District, on_delete=models.CASCADE)
    street = models.CharField(max_length=100)
    zip_code = models.CharField(max_length=10)
    request_date_time = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f'Order for {self.quantity} {self.product.name}'
    


class AssignedWorker(models.Model):
    WORK_STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('in_progress', 'In Progress'),
        ('completed', 'Completed'),
    ]

    assigned_worker_id = models.AutoField(primary_key=True)  # Specify your primary key field
    service_request = models.ForeignKey(ServiceRequest, on_delete=models.CASCADE)
    worker = models.ForeignKey(WorkerProfile, on_delete=models.CASCADE)
    work_status = models.CharField(max_length=20, choices=WORK_STATUS_CHOICES, default='pending')

    def __str__(self):
        return f"AssignedWorker {self.assigned_worker_id} - ServiceRequest {self.service_request.Request_id} - Worker {self.worker.worker_id} - Status {self.work_status}"





class LeaveApplication(models.Model):
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('approved', 'Approved'),
        ('rejected', 'Rejected'),
    ]

    leave_application_id = models.AutoField(primary_key=True)
    user = models.ForeignKey(CustomUser, on_delete=models.CASCADE)
    start_date = models.DateField()
    end_date = models.DateField()
    reason = models.TextField()
    medical_certificate = models.FileField(upload_to='medical_certificates/', null=True, blank=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    created_at = models.DateField(auto_now_add=True)

    def __str__(self):
        return f"Leave Application #{self.leave_application_id} - {self.user.username}"



class Assignment(models.Model):
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('in_progress', 'In Progress'),
        ('completed', 'Completed'),
    ]

    assignment_id = models.AutoField(primary_key=True)
    service_request = models.ForeignKey(ServiceRequest, on_delete=models.CASCADE)
    assigned_worker = models.ForeignKey('WorkerProfile', on_delete=models.CASCADE)
    work_status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')

    def __str__(self):
        return f"Assignment {self.assignment_id} - Request {self.service_request.Request_id} to Worker {self.assigned_worker.worker_id}"